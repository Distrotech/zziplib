<H3> How to use MKSITE.SH </H3>

<P>  <small><b> (a) xyz.htm body files (content) </b></small>:
  To create a MKSITE website you should simply create a number
  of "*.htm" input pages with a normal html editor. No special
  requirements are needed. You do not even need to set a
  "&lt;title&gt;" tag, the first header tag found in the file
  is used alternativly for the long title of your page - e.g.
  this input file uses "&lt;H3&gt;", just compare the header
  line with the title bar of your web browser. It's just the
  lowercased variant of the section header.
</P>

<P> <small><b> (b) site.htm sitefile (header) </b></small>:
  The "*.htm" files define the body of each "html" output page 
  which is often presented in a central white (inline)frame. To
  define the navigation items you only need to create a single
  extra "sitefile" by convention named "site.htm". This sitefile
  is the only argument to the MKSITE.SH script - the mksite.sh
  script will scan it for href's which will define the list of
  files that it needs to process. Effectivly you may have more
  files in the source directory  that are not touched at all,
  only the href'ed ones are "generated".
</P>
<P> <small><b> (c) href="xyz.html" in sitefile (binding) </b></small>:
  In fact not all the "href"s in the sitefile are going to be
  processed (as some might be generated by other tools of course).
  Only those with a special href format are converted which is
  simply that they start after a simple markup that starts itself
  right at the beginning of line - in other words a section marker 
  followed by the html href anchor - example:
</P><pre>
  &lt;title&gt;common title prefix &lt;!--$title?--&gt;&lt;/title&gt;
  &lt;hr&gt;&lt;a href="index.html"&gt;Overview&lt;/a&gt;
  &lt;br&gt;-&lt;a href="intro.html"&gt;Introduction&lt;/a&gt;
  &lt;br&gt;-&lt;a href="where.html"&gt;Downloads&lt;/a&gt;
  &lt;hr&gt;&lt;a href="doc.html"&gt;Documentation&lt;/a&gt;
  &lt;br&gt;-&lt;a href="man.html"&gt;Manual Page&lt;/a&gt;
  &lt;br&gt;-&lt;a href="ref.html"&gt;Cross References&lt;/a&gt;
      &lt;br&gt;&lt;a href="impressum.html"&gt;Impressum&lt;/a&gt; &lt;hr&gt;
</pre><P>
  where the last entry is not seen by mksite.sh since it does think
  it to be normal paragraph text. That allows you to build an
  "impressum.html" elsewhere, possibly a copy of a file generated
  by your supervising agency (or something like that).
</P>
<P> <small><b> (d) mksite.sh site.htm (generate)</b></small>:
  In fact the example above is a valid sitefile, even that the look
  is not eactly all too pleasing. Better use one of our cut-n-paste
  <a href="examples.html">examples</a>. Still note how we did use the
  hr[]-direct tags and br[-]-tags to define the categories of our
  website. Any additional space at the start of the line will make
  mksite.sh to ignore any hrefs contained on that line. All others
  are checked to be part of a known "sect"-classification style.
</P>
<P>
  With a file like <a href="site.htm">"site.htm"</a> available, just run
  <b><nobr><code>`mksite.sh site.htm`</code></nobr></b>. That's all.
  <br> and the engine will do something quite but not entirely unlike <PRE>
  sed -f xyz.html~head~ site.htm &gt;xyz.html
  sed -f xyz.html~body~ xyz.htm &gt;&gt;xyz.html</PRE>
</P>
